<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SubwayTalentApi</name>
    </assembly>
    <members>
        <member name="M:SubwayTalentApi.Controllers.AuthenticateController.#ctor(SubwayTalentApi.Security.ITokenServices)">
            <summary>
            Public constructor to initialize product service instance
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Controllers.AuthenticateController.Authenticate">
            <summary>
            Authenticates user and returns token with expiry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.AuthenticateController.GetAuthToken(System.String)">
            <summary>
            Returns auth token for the validated user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.LoginController.#ctor(SubwayTalentApi.Security.ITokenServices)">
            <summary>
            Public constructor to initialize product service instance
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Controllers.LoginController.Authenticate(SubwayTalentApi.Models.UserModel)">
            <summary>
            Authenticates user and returns token with expiry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.LoginController.GetAuthToken(SubwayTalentApi.Models.UserModel)">
            <summary>
            Returns auth token for the validated user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:SubwayTalentApi.Filters.ApiAuthenticationFilter">
            <summary>
            Custom Authentication Filter Extending basic Authentication
            </summary>
        </member>
        <member name="T:SubwayTalentApi.Filters.GenericAuthenticationFilter">
            <summary>
            Generic basic Authentication filter.
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Filters.GenericAuthenticationFilter.#ctor">
            <summary>
            Public default Constructor
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Filters.GenericAuthenticationFilter.#ctor(System.Boolean)">
            <summary>
            parameter isActive explicitly enables/disables this filter.
            </summary>
            <param name="isActive"></param>
        </member>
        <member name="M:SubwayTalentApi.Filters.GenericAuthenticationFilter.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Checks basic authentication request
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:SubwayTalentApi.Filters.GenericAuthenticationFilter.OnAuthorizeUser(System.String,System.String,System.String)">
            <summary>
            Virtual method.Can be overriden with the custom Authorization.
            </summary>
            <param name="user"></param>
            <param name="pass"></param>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Filters.GenericAuthenticationFilter.FetchAuthHeader(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Checks for autrhorization header in the request and parses it, creates user credentials and returns as BasicAuthenticationIdentity
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:SubwayTalentApi.Filters.GenericAuthenticationFilter.ChallengeAuthRequest(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Send the Authentication Challenge request
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:SubwayTalentApi.Filters.ApiAuthenticationFilter.#ctor">
            <summary>
            Default Authentication Constructor
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Filters.ApiAuthenticationFilter.#ctor(System.Boolean)">
            <summary>
            AuthenticationFilter constructor with isActive parameter
            </summary>
            <param name="isActive"></param>
        </member>
        <member name="M:SubwayTalentApi.Filters.ApiAuthenticationFilter.OnAuthorizeUser(System.String,System.String,System.String)">
            <summary>
            Protected overriden method for authorizing user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="T:SubwayTalentApi.Filters.BasicAuthenticationIdentity">
            <summary>
            Basic Authentication identity
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.Password">
            <summary>
            Get/Set for password
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.UserId">
            <summary>
            Get/Set for UserId
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.AccessToken">
            <summary>
            Get/Set for AccessToken. For FB login
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.Email">
            <summary>
            Get/Set for Email
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.FirstName">
            <summary>
            Get/Set for FirstName
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.Birthday">
            <summary>
            Get/Set for Birthday
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Filters.BasicAuthenticationIdentity.LastName">
            <summary>
            Get/Set for LastName
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Controllers.AccountsController.Login(SubwayTalentApi.Models.UserModel)">
            <summary>
            Normal or Facebook Login
            </summary>
            <param name="userDetails">If AccessToken was supplied, this will automatically be a Facebook Login. The properties that are used are:
            {
              "AccessToken":null,
              "UserId":"newUser",
              "Password":"12345",
              "Device" : 1,   (1 - IOS, 2-Android)
              "DeviceToken":null
            }
            </param>
            <returns>the return</returns> 
        </member>
        <member name="M:SubwayTalentApi.Controllers.AccountsController.AddUser(SubwayTalentApi.Models.UserModel)">
            <summary>
            This is used mainly for signing up users
            </summary>
            <param name="userDetails">If the user won't use facebook login, the properties that are used are:
            {
                  "AccessToken":null,
                  "UserId":"newUser3",
                  "Password":"12345",
                  "FirstName":"New",
                  "LastName":"User",
                   "Email":"newuser@user.com",
                  "Birthday":"12/12/2017"  
               }
            
            </param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.AccountsController.GetAllTalents(SubwayTalent.Contracts.UserAccount)">
            <summary>
            
            </summary>
            <param name="userDetails">Only UserId will be used here.
            {       
               "UserId":"newUser3"
            }
            </param>
            <returns></returns>        
        </member>
        <member name="M:SubwayTalentApi.Controllers.AccountsController.GetUserFiles(SubwayTalent.Contracts.UserAccount)">
             <summary>
             
             </summary>
             <param name="user">Only UserId will be used here.
             
            {       
              "UserId":"newUser3"
            }
             </param>
             <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.EventsController.GetAllEvents(SubwayTalentApi.Models.HomeModel)">
            <summary>
            Used in home tab of the talent to get the list of events.
            </summary>
            <param name="user">not required. if user has value it won't get any events associated to that user</param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.EventsController.GetTalentInvites(SubwayTalentApi.Models.UserModel)">
            <summary>
            For invites tab of talent user. This is grouped by event type and you won't see any event name or id, just event type info and then the planer
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.EventsController.AcceptRejectRequestTalentInvite(SubwayTalentApi.Models.AcceptRejectModel)">
            <summary>
            
            </summary>
            <param name="model">Status [0-pending,1-accepted,2-rejected,3-requested],  UserId is the userid of the talent</param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.EventsController.RateTalentToEvent(SubwayTalentApi.Models.EventModel)">
             <summary>
             
             </summary>
             <param name="eventObj">only used properties are
             Id,  Talent with [UserId,TalentName,Rating]
             
             {
              "Id": 1,  
              "Talents": [
                {
                  "UserId": "newUser1",
                  "TalentName": "newUser1",
                  "Rating":"1",
                  "Comments" : ""
                }],
               "Planners" : [
                {
                  "UserId": "Planner1",
                }]
            }
             </param>
             <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.EventsController.RatePlannerToEvent(SubwayTalentApi.Models.EventModel)">
             <summary>
             
             </summary>
             <param name="eventObj">only used properties are
             Id,  Planners with [UserId,TalentName,Rating] and talent. Talent is the one who rated the planner
             
             {
              "Id": 1,  
              "Planners": [
                {
                  "UserId": "Planner1",
                  "TalentName": "Planner1",
                  "Rating":"4",
                  "Comments":"ssdf"
                }],
              "Talents" : [
                {
                   "UserId": "newUser2"
                }]
            }
            </param>
             <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.EventsController.DropTalent(SubwayTalentApi.Models.DropTalentModel)">
            <summary>
            
            </summary>
            <param name="dropModel"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Controllers.MediaController.UploadMedia">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailContentFactory.GetAcceptedMessage(System.String,System.String,System.String,System.String)">
            <summary>
            The Talent accepted to perform in the event
            </summary>
            <param name="plannerName"></param>
            <param name="talentName"></param>
            <param name="eventName"></param>
            <param name="eventdate"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailContentFactory.GetInviteMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Planner invited the talent to perform in the event.
            </summary>
            <param name="plannerName"></param>
            <param name="talentName"></param>
            <param name="eventName"></param>
            <param name="eventdate"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailContentFactory.GetPlannerAcceptedMessage(System.String,System.String,System.String,System.String)">
            <summary>
            The Planner accepted the request
            </summary>
            <param name="plannerName"></param>
            <param name="talentName"></param>
            <param name="eventName"></param>
            <param name="eventdate"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailContentFactory.GetRequestedMessage(System.String,System.String,System.String,System.String)">
            <summary>
            The talent requested to perform in the event
            </summary>
            <param name="plannerName"></param>
            <param name="talentName"></param>
            <param name="eventName"></param>
            <param name="eventdate"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailContentFactory.GetTalentRejectedMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Talent rejected the invitation
            </summary>
            <param name="plannerName"></param>
            <param name="talentName"></param>
            <param name="eventName"></param>
            <param name="eventdate"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailContentFactory.GetPlannerRejectedMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Planner rejected the talent request.
            </summary>
            <param name="plannerName"></param>
            <param name="talentName"></param>
            <param name="eventName"></param>
            <param name="eventdate"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.EmailSender.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cc"></param>
            <param name="to"></param>
            <param name="body"></param>
            <param name="subject"></param>
        </member>
        <member name="M:SubwayTalentApi.Helpers.LoginHelper.AuthenticateUser(SubwayTalentApi.Models.UserModel)">
            <summary>
            For Authentication filters
            </summary>
            <param name="userDetails"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Helpers.NotificationHelper.SendEventUpdates(SubwayTalent.Contracts.Event,System.Int16,System.String)">
            <summary>
            
            </summary>
            <param name="eventObj"></param>
            <param name="emailSubject"></param>
            <param name="notifAlertMsg"></param>
            <param name="updateType">1 for update, 2 for deleting</param>
        </member>
        <member name="M:SubwayTalentApi.Helpers.ThumbnailGenerator.Generate(System.String,System.String,System.Nullable{System.Single})">
            <summary>
            
            </summary>
            <param name="videoPath"></param>
            <param name="thumbnailPath"></param>
            <param name="framePosition"></param>
        </member>
        <member name="P:SubwayTalentApi.Models.HomeModel.RemoveExpiredDates">
            <summary>
            1 true, 0 false
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Models.UserModel.ProfilePic">
            <summary>
            For Planner
            </summary>
        </member>
        <member name="P:SubwayTalentApi.Models.UserModel.Status">
            <summary>
            Status for the event. 
            0 - pending/invited, 1 - accepted, 2 - rejected/declined, 3 - requested by talent, 4 - dropped
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Security.ITokenServices.GenerateToken(System.String)">
            <summary>
             Function to generate unique token with expiry against the provided userId.
             Also add a record in database for generated token.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Security.ITokenServices.ValidateToken(System.String)">
            <summary>
            Function to validate token againt expiry and existance in database.
            </summary>
            <param name="tokenId"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Security.ITokenServices.Kill(System.String)">
            <summary>
            Method to kill the provided token id.
            </summary>
            <param name="tokenId"></param>
        </member>
        <member name="M:SubwayTalentApi.Security.ITokenServices.DeleteByUserId(System.String)">
            <summary>
            Delete tokens for the specific deleted user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Security.TokenServices.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:SubwayTalentApi.Security.TokenServices.GenerateToken(System.String)">
            <summary>
             Function to generate unique token with expiry against the provided userId.
             Also add a record in database for generated token.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Security.TokenServices.ValidateToken(System.String)">
            <summary>
            Method to validate token against expiry and existence in database.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SubwayTalentApi.Security.TokenServices.Kill(System.String)">
            <summary>
            Method to kill the provided token id.
            </summary>
            <param name="token">true for successful delete</param>
        </member>
        <member name="M:SubwayTalentApi.Security.TokenServices.DeleteByUserId(System.String)">
            <summary>
            Delete tokens for the specific deleted user
            </summary>
            <param name="userId"></param>
            <returns>true for successful delete</returns>
        </member>
    </members>
</doc>
